(slice, int) dict_get?(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGET" "NULLSWAPIFNOT";

() send_grams(slice address, int amount) impure {
  cell msg = begin_cell()
    .store_uint (0x18, 6) ;; bounce
    .store_slice(address) ;; 267 bit address
    .store_grams(amount)
    .store_uint(0, 107) ;; 106 zeroes +  0 as an indicator that there is no cell with the data
    .end_cell(); 
  send_raw_message(msg, 3); ;; mode, 2 for ignoring errors, 1 for sender pays fees, 64 for returning inbound message value
}

cell pack_oracle_client_data(slice master_address, int client_id) inline {
  return begin_cell().store_slice(master_address).store_uint(client_id, 32).end_cell();
}

cell calculate_oracle_client_state_init(slice master_address, int client_id, cell oracle_client_code) inline {
  return begin_cell()
    .store_uint(0, 2)
    .store_dict(oracle_client_code)
    .store_dict(pack_oracle_client_data(master_address, client_id))
    .store_uint(0, 1)
    .end_cell();
}

slice calculate_oracle_client_address(cell state_init) inline {
  return begin_cell().store_uint(4, 3)
    .store_int(workchain(), 8)
    .store_uint(cell_hash(state_init), 256)
    .end_cell()
    .begin_parse();
}

