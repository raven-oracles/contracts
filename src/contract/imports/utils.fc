() send_grams(slice address, int amount) impure {
  cell msg = begin_cell()
    .store_uint (0x18, 6) ;; bounce
    .store_slice(address) ;; 267 bit address
    .store_grams(amount)
    .store_uint(0, 107) ;; 106 zeroes +  0 as an indicator that there is no cell with the data
    .end_cell(); 
  send_raw_message(msg, 3); ;; mode, 2 for ignoring errors, 1 for sender pays fees, 64 for returning inbound message value
}

cell pack_oracle_client_data(int balance, slice owner_address, slice oracle_master_address, cell oracle_client_code, slice comission_address) inline {
  return  begin_cell()
            .store_uint(0, 64)
            .store_slice(owner_address)
            .store_slice(oracle_master_address)
            .store_ref(oracle_client_code)
            .store_slice(comission_address)
           .end_cell();
}

cell calculate_oracle_client_state_init(slice owner_address, slice oracle_master_address, slice sc_address, cell oracle_client_code, slice comission_address) inline {
  return begin_cell()
          .store_uint(0, 6)
          .store_dict(oracle_client_code)
          .store_dict(pack_oracle_client_data(0, owner_address, oracle_master_address, oracle_client_code, comission_address))
          .store_uint(0, 1)
         .end_cell();
}

slice calculate_oracle_client_address(cell state_init) inline {
  return begin_cell().store_uint(4, 3)
                     .store_int(workchain(), 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

slice calculate_user_oracle_client_address(slice owner_address, slice oracle_master_address, slice sc_address, cell oracle_client_code, slice comission_address) inline {
  return calculate_oracle_client_address(calculate_oracle_client_state_init(owner_address, oracle_master_address, sc_address, oracle_client_code, comission_address));
}
